# .github/workflows/build-ffmpeg-kit.yml
name: Build FFmpeg Kit for Android

env:
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true
  
on:
  workflow_dispatch:
    inputs:
      ffmpeg_version:
        description: 'FFmpeg Kit版本 (分支或tag)'
        required: true
        default: 'main'
        type: string
      enable_gpl:
        description: '启用GPL库 (x264/x265 等)'
        required: true
        default: true
        type: boolean
      api_level:
        description: 'Android API Level'
        required: true
        default: '21'
        type: string
      architectures:
        description: '目标架构'
        required: true
        default: 'arm64-v8a'
        type: choice
        options:
        - 'arm64-v8a'
        - 'armeabi-v7a'
        - 'arm64-v8a-and-armeabi-v7a'
        - 'all'

jobs:
  build-ffmpeg-kit:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout FFmpeg Kit
      uses: actions/checkout@v4
      with:
        repository: 'arthenica/ffmpeg-kit'
        ref: ${{ inputs.ffmpeg_version }}

    - name: Setup Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Remove Conflicting CMake Versions
      run: |
        ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --uninstall "cmake;3.10.2.4988404" "cmake;3.18.1" || true

    - name: Setup Android NDK
      run: |
        NDK_VERSION=r25b-linux
        curl -s "https://dl.google.com/android/repository/android-ndk-${NDK_VERSION}.zip" -o ndk.zip
        unzip -q -o ndk.zip -d .ndk
        echo "ANDROID_NDK_ROOT=$PWD/.ndk/$(ls .ndk)" >> $GITHUB_ENV

    - name: Setup Build Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          git \
          autoconf \
          libtool \
          pkg-config \
          curl \
          wget \
          nasm \
          yasm

    - name: Cache FFmpeg Kit Prebuilt
      uses: actions/cache@v4
      with:
        path: prebuilt/
        key: ffmpeg-kit-${{ inputs.ffmpeg_version }}-${{ inputs.api_level }}-${{ inputs.architectures }}-${{ inputs.enable_gpl }}

    - name: Configure Build Parameters
      id: configure
      run: |
        BUILD_ARGS="-d --lts --api-level=${{ inputs.api_level }}"

        if [[ "${{ inputs.enable_gpl }}" == "true" ]]; then
          BUILD_ARGS="$BUILD_ARGS --enable-gpl --enable-x264 --enable-android-zlib"
        fi

        case "${{ inputs.architectures }}" in
          "arm64-v8a")
            BUILD_ARGS="$BUILD_ARGS --disable-arm-v7a --disable-arm-v7a-neon --disable-x86 --disable-x86-64"
            ;;
          "armeabi-v7a")
            BUILD_ARGS="$BUILD_ARGS --disable-arm-v7a-neon --disable-arm64-v8a --disable-x86 --disable-x86-64"
            ;;
          "arm64-v8a-and-armeabi-v7a")
            BUILD_ARGS="$BUILD_ARGS --disable-x86 --disable-x86-64 --disable-arm-v7a-neon"
            ;;
          "all")
            # 全部架构，不做限制
            ;;
        esac

        echo "BUILD_ARGS=$BUILD_ARGS" >> $GITHUB_OUTPUT
        echo "使用编译参数: $BUILD_ARGS"

    - name: Build FFmpeg Kit
      run: |
        chmod +x android.sh
        ./android.sh ${{ steps.configure.outputs.BUILD_ARGS }}

    - name: Package Build Results
      run: |
        mkdir -p release

        echo "=== 查找 AAR 文件 ==="
        find prebuilt/ -name "*.aar" -type f || true

        echo "=== 查找 SO 文件 ==="
        find prebuilt/ -name "*.so" -type f || true

        # 复制 AAR
        find prebuilt/ -name "*.aar" -type f -exec cp {} release/ \; || true

        # 复制 SO (如果没有 AAR，就至少有 so)
        # find prebuilt/ -name "*.so" -type f -exec cp {} release/ \; || true

        # 写入构建信息
        echo "FFmpeg Kit版本: ${{ inputs.ffmpeg_version }}" > release/build-info.txt
        echo "编译时间: $(date)" >> release/build-info.txt
        echo "API Level: ${{ inputs.api_level }}" >> release/build-info.txt
        echo "架构: ${{ inputs.architectures }}" >> release/build-info.txt
        echo "GPL: ${{ inputs.enable_gpl }}" >> release/build-info.txt

        echo "=== Release 目录内容 ==="
        ls -la release/

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-kit-android-${{ inputs.architectures }}-api${{ inputs.api_level }}
        path: release/
        retention-days: 30
